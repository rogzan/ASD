"""
Dana jest szachownica A o wymiarach n x n . Szachownica zawiera liczby wymierne. Należy przejść
z pola (1,1) na pole (n,n) korzystając jedynie z ruchów "w dół" oraz "w prawo". Wejście na pole
kosztuje tyle, co znajdująca się tam liczba. Proszę zaimplementować algorytm znajdujący trasę
o minimalnym koszcie.

"""

def minCost(c):

    n=len(c)

    f=[None]*n
    for i in range(n):
        f[i]=[0]*n
    f[0][0]=c[0][0]
    for i in range(1,n):
        f[i][0]=f[i-1][0]+c[i][0]
        f[0][i]=f[0][i-1]+c[0][i]

    for j in range(1,n):
        for i in range(1,n):
            f[i][j]=min(f[i-1][j],f[i][j-1])+c[i][j]

    return f[n-1][n-1],f



def printPath(p,f,i,j):

    p[i][j]=1

    if i-1>=0 and j-1>=0:
        if f[i-1][j]<f[i][j-1]:
            printPath(p,f,i-1,j)
        else:
            printPath(p,f,i,j-1)
    elif i-1>=0:
        printPath(p,f,i-1,j)
    elif j-1>=0:
        printPath(p,f,i,j-1)



def wrapPathCost(c):

    mi,f=minCost(c)
    n=len(c)
    p=[None]*n
    for i in range(n):
        p[i]=[0]*n

    printPath(p,f,n-1,n-1)

    for i in range(n):
        print(p[i])
    



if __name__=="__main__":
    c=[[2,4,7,3,2,1],[3,5,3,2,1,7],[5,3,1,2,2,2],[1,1,3,1,4,8],[1,5,6,1,7,3],[2,1,6,6,6,6]]
    wrapPathCost(c)
